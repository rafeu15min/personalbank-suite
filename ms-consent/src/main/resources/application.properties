# ==========================================================
# 1. CONFIGURAÇÕES GERAIS DA APLICAÇÃO
# ==========================================================
quarkus.application.name=ms-consent
quarkus.application.version=1.0.0
# Porta HTTP para a API que o frontend irá consumir
quarkus.http.port=8083

# ==========================================================
# 2. IMPORTAÇÃO DA CONFIGURAÇÃO COMPARTILHADA
# ==========================================================
# Importa as configurações das instituições (URLs, etc.) do arquivo central.
quarkus.config.import=${user.dir}/../config/banks.yml

# ==========================================================
# 3. CONFIGURAÇÃO DO BANCO DE DADOS (LENDO DO .ENV)
# ==========================================================
# Define o tipo do banco de dados
quarkus.datasource.db-kind=postgresql

# Lê o nome de usuário do banco da variável DB_USER definida no .env
quarkus.datasource.username=${DB_USER:postgres}

# Lê a senha do banco da variável DB_PASSWORD definida no .env
quarkus.datasource.password=${DB_PASSWORD:postgres}

# Lê a URL de conexão JDBC do banco da variável DB_URL definida no .env
quarkus.datasource.jdbc.url=${DB_URL:jdbc:postgresql://localhost:5432/personalbank_db}

# Configuração do Hibernate para gerar o schema do banco de dados automaticamente
# Ideal para desenvolvimento. Para produção, use uma ferramenta de migração como Flyway ou Liquibase.
quarkus.hibernate-orm.database.generation=drop-and-create

# ==========================================================
# 4. CONFIGURAÇÃO DO KAFKA PRODUCER (CANAL DE SAÍDA)
# ==========================================================
# Endereço dos servidores Kafka, lido do .env
kafka.bootstrap.servers=${KAFKA_BROKERS:localhost:9092}

# --- CANAL DE SAÍDA (PRODUCER) PARA PUBLICAR EVENTOS DE CARGA INICIAL ---
# Configura o canal 'initial-load-out' usado pelo ConsentEventProducer.
mp.messaging.outgoing.initial-load-out.connector=smallrye-kafka
# Define o tópico para onde as mensagens serão enviadas.
# Nota: A classe ConsentEventProducer poderia ser adaptada para enviar para tópicos
# específicos (ex: ...transacoes, ...cartoes), mas um tópico geral simplifica.
mp.messaging.outgoing.initial-load-out.topic=consentimentos.carga-inicial.geral
# Define como o valor da mensagem (o objeto InitialLoadEvent) será serializado.
mp.messaging.outgoing.initial-load-out.value.serializer=io.quarkus.kafka.client.serialization.JsonObjectSerializer